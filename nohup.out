/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/joueur.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.net.load_state_dict(torch.load(f'./models/{type_model}/{model_version}/safetensor/{reload_name}', map_location=device))
Traceback (most recent call last):
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 304, in <module>
    main()
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 142, in main
    actor = Model(hero_actor_model_version, hero_actor_classe, hero_actor_save_name, hero_actor_reload_name, 'actor', device)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/joueur.py", line 7, in __init__
    self.net.load_state_dict(torch.load(f'./models/{type_model}/{model_version}/safetensor/{reload_name}', map_location=device))
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 2584, in load_state_dict
    raise RuntimeError(
RuntimeError: Error(s) in loading state_dict for Actor:
	Missing key(s) in state_dict: "hidden_layers.1.weight", "hidden_layers.1.bias". 
	size mismatch for first_layer.weight: copying a param with shape torch.Size([64, 3080]) from checkpoint, the shape in current model is torch.Size([256, 3080]).
	size mismatch for first_layer.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for hidden_layers.0.weight: copying a param with shape torch.Size([64, 64]) from checkpoint, the shape in current model is torch.Size([256, 256]).
	size mismatch for hidden_layers.0.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for final_layer.weight: copying a param with shape torch.Size([10, 64]) from checkpoint, the shape in current model is torch.Size([10, 256]).
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/joueur.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.net.load_state_dict(torch.load(f'./models/{type_model}/{model_version}/safetensor/{reload_name}', map_location=device))
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py:147: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  predictor_net.load_state_dict(torch.load('./models/predictor/version1/safetensor/gen_0_working', map_location=device))
2 0
4 0
2 0
0 0
4 0
5 0
2 0
2 1
3 0
1 0
5 0
3 0
Traceback (most recent call last):
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 304, in <module>
    main()
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 292, in main
    plot_infos(score_hero, score_adv, l_loss_actor, l_loss_critic, l_gamma, l_epsilon, eqm_critic_liste, critic_value, critic_value_expected, hard_critic_value, l_loss_predictor, l_max_loss_predictor, l_loss_actor_test, l_loss_critic_test, l_loss_predictor_test)
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 82, in plot_infos
    plot_on_6_diagrams(dict11, dict12, dict21, dict22, dict31, dict32)
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/graph_train.py", line 11, in plot_on_6_diagrams
    fig, axs = plt.subplots(3, 2, figsize=(12, 10))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/pyplot.py", line 1760, in subplots
    axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/figure.py", line 861, in subplots
    axs = gs.subplots(sharex=sharex, sharey=sharey, squeeze=squeeze,
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/gridspec.py", line 283, in subplots
    axarr[row, col] = figure.add_subplot(
                      ^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/figure.py", line 710, in add_subplot
    ax = projection_class(self, *args, **pkw)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 673, in __init__
    self._init_axis()
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 818, in _init_axis
    self.yaxis = maxis.YAxis(self, clear=False)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/axis.py", line 2578, in __init__
    super().__init__(*args, **kwargs)
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/axis.py", line 662, in __init__
    self.label = mtext.Text(
                 ^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/text.py", line 139, in __init__
    self._reset_visual_defaults(
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/text.py", line 175, in _reset_visual_defaults
    self.set_color(mpl._val_or_rc(color, "text.color"))
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/text.py", line 998, in set_color
    self.stale = True
    ^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/venv/lib/python3.11/site-packages/matplotlib/artist.py", line 316, in stale
    @stale.setter

KeyboardInterrupt
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/joueur.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.net.load_state_dict(torch.load(f'./models/{type_model}/{model_version}/safetensor/{reload_name}', map_location=device))
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py:147: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  predictor_net.load_state_dict(torch.load('./models/predictor/version1/safetensor/gen_0_working', map_location=device))
1 4
4 7
0 2
1 4
2 1
4 4
3 2
6 7
3 3
1 2
3 5
1 0
2 1
3 3
1 3
4 4
2 2
2 1
2 3
3 3
3 2
0 3
4 2
3 5
1 3
0 2
1 2
1 5
0 4
3 1
3 2
2 5
1 2
0 1
3 5
0 3
4 3
2 3
4 3
2 2
4 2
2 6
4 5
3 4
3 2
4 5
2 5
2 4
3 2
2 2
5 1
1 0
3 5
3 4
2 4
3 4
1 4
0 3
2 6
1 4
4 4
2 4
2 2
2 3
1 4
4 4
3 4
1 7
3 5
2 5
3 1
0 5
3 4
3 4
2 4
1 0
2 2
0 5
2 3
3 3
1 8
5 3
5 2
2 4
4 3
1 3
2 3
4 3
2 3
1 2
1 3
1 2
2 3
3 6
4 3
5 2
2 4
2 3
4 4
1 7
0 3
2 4
3 3
3 8
3 4
2 3
3 2
3 1
0 1
3 2
5 5
2 2
3 6
4 7
1 1
4 1
5 3
2 4
3 4
6 6
2 3
4 2
4 1
3 5
1 3
5 2
3 5
3 2
1 3
5 2
4 3
0 3
2 2
4 5
6 6
1 4
3 4
1 2
5 2
4 4
2 3
2 6
2 5
4 4
1 4
4 4
3 2
3 3
3 3
2 4
3 3
2 3
4 4
1 2
1 3
1 1
0 2
2 4
3 2
3 1
4 4
5 4
3 2
3 3
3 2
2 2
1 4
5 8
3 4
6 3
3 7
4 4
3 0
2 3
3 3
3 2
3 2
3 3
2 5
2 1
3 5
1 3
2 2
5 3
3 2
4 4
5 5
4 3
5 6
2 2
4 4
3 4
4 5
3 3
1 1
1 2
1 1
4 4
5 2
0 4
5 6
5 3
3 3
5 5
4 6
Traceback (most recent call last):
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 304, in <module>
    main()
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 242, in main
    train_models(memory=memory, 
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py", line 104, in train_models
    loss_pred_dq.append(optimize_predictor(batch, model_training.predictor_net, model_training.optimizer_predictor, test_dataset=test_dataset).clone().detach().to('cpu'))
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/actor_critic.py", line 31, in optimize_predictor
    action_J1_batch = torch.cat(batch.action_J1)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/training_utils/joueur.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.net.load_state_dict(torch.load(f'./models/{type_model}/{model_version}/safetensor/{reload_name}', map_location=device))
/Data/augustin.kheng/MadPodRacing-enhanced-actor-critic/main.py:147: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  predictor_net.load_state_dict(torch.load('./models/predictor/version1/safetensor/gen_0_working', map_location=device))
